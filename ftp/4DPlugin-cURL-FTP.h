/* --------------------------------------------------------------------------------
 #
 #	4DPlugin-cURL-FTP.h
 #	source generated by 4D Plugin Wizard
 #	Project : cURL FTP
 #	author : miyako
 #	2019/09/12
 #  
 # --------------------------------------------------------------------------------*/

#ifndef PLUGIN_CURL_FTP_H
#define PLUGIN_CURL_FTP_H

#include "4DPluginAPI.h"
#include "C_TEXT.h"
#include "C_LONGINT.h"
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <mutex>
#include "curl/curl.h"

#define CURLOPT_AUTOPROXY 8
#define CURLOPT_ATOMIC 73
#define CURLOPT_ENCODING_IN 35
#define CURLOPT_ENCODING_OUT 40

#include "json/json.h"
#include "proxy.h"
#include "iconv.h"

void convertFromString(std::string &fromString, CUTF16String &toString);
CURLoption json_get_curl_option_name(Json::Value::const_iterator n);
long json_get_curl_option_value(Json::Value::const_iterator n);
void json_get_curl_option_v(CURL *curl,
                            CURLoption option,
                            Json::Value::const_iterator n,
                            struct curl_slist *list);

#pragma mark -

void cURL_FTP_Delete(PA_PluginParameters params);
void cURL_FTP_GetDirList(PA_PluginParameters params);
void cURL_FTP_GetFileInfo(PA_PluginParameters params);
void cURL_FTP_MakeDir(PA_PluginParameters params);
void cURL_FTP_PrintDir(PA_PluginParameters params);
void cURL_FTP_Receive(PA_PluginParameters params);
void cURL_FTP_RemoveDir(PA_PluginParameters params);
void cURL_FTP_Rename(PA_PluginParameters params);
void cURL_FTP_Send(PA_PluginParameters params);
void cURL_FTP_System(PA_PluginParameters params);

void cURL_FTP_VersionInfo(PA_PluginParameters params);

typedef CUTF8String generic_string_t;

size_t apply_output_encoding(generic_string_t& src, generic_string_t& oe);
size_t apply_input_encoding(generic_string_t& src, generic_string_t& ie);

#if VERSIONMAC
#define CPathString CUTF8String
#define CPathOpen fopen
#define CPathAppend "ab"
#define CPathCreate "wb"
#define CPathRead "rb"
#else
#include <Shlobj.h>
#define CPathString CUTF16String
#define CPathOpen _wfopen
#define CPathAppend L"ab"
#define CPathCreate L"wb"
#define CPathRead L"rb"
#endif

#if VERSIONMAC
typedef std::string absolute_path_t;
#define folder_separator '/'
#else
typedef std::wstring absolute_path_t;
#define folder_separator L'\\'
#endif

#if VERSIONMAC
typedef char path_t;
#else
typedef wchar_t path_t;
#endif

bool create_folder(path_t *absolute_path);
void create_parent_folder(path_t *absolute_path);

#if VERSIONMAC
#define LOG_CURLINFO_TEXT           "CURLINFO_TEXT.log"
#define LOG_CURLINFO_HEADER_IN      "CURLINFO_HEADER_IN.log"
#define LOG_CURLINFO_HEADER_OUT     "CURLINFO_HEADER_OUT.log"
#define LOG_CURLINFO_DATA_IN        "CURLINFO_DATA_IN.log"
#define LOG_CURLINFO_DATA_OUT       "CURLINFO_DATA_OUT.log"
#define LOG_CURLINFO_SSL_DATA_OUT   "CURLINFO_SSL_DATA_OUT.log"
#define LOG_CURLINFO_SSL_DATA_IN    "CURLINFO_SSL_DATA_IN.log"
#else
#define LOG_CURLINFO_TEXT           L"CURLINFO_TEXT.log"
#define LOG_CURLINFO_HEADER_IN      L"CURLINFO_HEADER_IN.log"
#define LOG_CURLINFO_HEADER_OUT     L"CURLINFO_HEADER_OUT.log"
#define LOG_CURLINFO_DATA_IN        L"CURLINFO_DATA_IN.log"
#define LOG_CURLINFO_DATA_OUT       L"CURLINFO_DATA_OUT.log"
#define LOG_CURLINFO_SSL_DATA_OUT   L"CURLINFO_SSL_DATA_OUT.log"
#define LOG_CURLINFO_SSL_DATA_IN    L"CURLINFO_SSL_DATA_IN.log"
#endif

#define MAX_LENGTH_FOR_PATH 1024

typedef struct
{
//    const path_t *path;
//    const path_t *dir;
    
    path_t path[MAX_LENGTH_FOR_PATH];
    path_t dir[MAX_LENGTH_FOR_PATH];
    
    size_t pos;
    FILE *f;
    BOOL useWildCard;
    BOOL shouldAppend;
}path_ctx;

typedef enum
{
    PROTOCOL_TYPE_FTP = 0,
    PROTOCOL_TYPE_SFTP = 1,
    PROTOCOL_TYPE_FTPS = 2,
    PROTOCOL_TYPE_UNKNOWN = -1
}protocol_type_t;

typedef struct
{
    path_t path[MAX_LENGTH_FOR_PATH];
    
    curl_off_t size_CURLINFO_TEXT;
    curl_off_t size_CURLINFO_HEADER_IN;
    curl_off_t size_CURLINFO_HEADER_OUT;
    curl_off_t size_CURLINFO_DATA_IN;
    curl_off_t size_CURLINFO_DATA_OUT;
    curl_off_t size_CURLINFO_SSL_DATA_IN;
    curl_off_t size_CURLINFO_SSL_DATA_OUT;
    
}http_debug_ctx;

CURLcode curl_perform(CURLM *mcurl, CURL *curl, C_TEXT& Param3, C_TEXT& userInfo);
protocol_type_t curl_set_options(CURL *curl, C_TEXT& Param1, C_TEXT& userInfo,
                                 CUTF8String& path,
                                 CUTF8String& ie,
                                 CUTF8String& oe,
                                 BOOL removeFileName = FALSE);
void last_path_component(CUTF8String& path);
void remove_trailing_separator(CUTF8String& path);
void remove_trailing_separator(CUTF16String& path);
void curl_unescape_path(CURL *curl, CUTF8String& path);
void curl_get_info(CURL *curl, CUTF16String& json);

size_t curl_header_function_for_system(void *buffer,
                                       size_t size,
                                       size_t nmemb,
                                       CUTF8String& system);

size_t curl_header_function_for_fileinfo(void *buffer,
                                         size_t size,
                                         size_t nmemb,
                                         CUTF8String& fileSize);

size_t curl_write_function_for_text(void *buffer,
                                    size_t size,
                                    size_t nmemb,
                                    CUTF8String& text);

size_t curl_read_function_for_path(void *buffer,
                                   size_t size,
                                   size_t nmemb,
                                   path_ctx *ctx);

size_t curl_write_function_for_path(void *buffer,
                                    size_t size,
                                    size_t nmemb,
                                    path_ctx *ctx);

size_t curl_chunk_bgn_function(struct curl_fileinfo *finfo,
                               path_ctx *ctx,
                               int remains);

size_t curl_debug_function(CURL *curl,
                           curl_infotype type,
                           char *data,
                           size_t size,
                           http_debug_ctx *ctx);

BOOL curl_set_debug_option(CURL *curl,
                           C_TEXT& Param1,
                           CPathString& debug_folder_path);

size_t curl_chunk_end_function(path_ctx *ctx);

void curl_set_debug(CURL *curl, C_TEXT& Param1, http_debug_ctx *debug_ctx);

#define USE_PA_EXECUTE_METHOD_BY_ID 1

#endif /* PLUGIN_CURL_FTP_H */
